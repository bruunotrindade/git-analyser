/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.gems.tipmerge.gui;

import br.uff.ic.gems.tipmerge.dao.CommitterDao;
import br.uff.ic.gems.tipmerge.dao.MergeFilesDao;
import br.uff.ic.gems.tipmerge.dao.RepositoryDao;
import br.uff.ic.gems.tipmerge.experiment.Git;
import br.uff.ic.gems.tipmerge.experiment.RevisionAnalyzer;
import br.uff.ic.gems.tipmerge.model.Committer;
import br.uff.ic.gems.tipmerge.model.MergeFiles;
import br.uff.ic.gems.tipmerge.model.Repository;
import br.uff.ic.gems.tipmerge.util.Export;
import br.uff.ic.gems.tipmerge.util.RunGit;
import br.uff.ic.gems.tipmerge.util.Statistics;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Catarina
 */
public class JFrameGeneralAnalysis extends javax.swing.JFrame {

    Repository repos;

    /**
     * Creates new form JFrameGeneralAnalysis
     */
    public JFrameGeneralAnalysis(Repository repository) {
        initComponents();
        this.repos = repository;
        RepositoryDao rdao = new RepositoryDao(this.repos.getProject());
        rdao.setGeneralBasicDatas(this.repos);
        txRepositoryName.setText(repos.getProject().getName());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txCommits = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txMerges = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txBranches = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txCommitters = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btBasic = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txConflitcts = new javax.swing.JTextField();
        jcbConflicts = new javax.swing.JComboBox();
        labelLoading = new javax.swing.JLabel();
        btConflict = new javax.swing.JButton();
        txMergesC = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        labelLoadingMJ = new javax.swing.JLabel();
        btMajority = new javax.swing.JButton();
        jcbMajority1 = new javax.swing.JComboBox();
        txMajority1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txRepositoryName = new javax.swing.JTextField();
        labelRepository = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("General Analysis");

        jTabbedPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Analysis"));

        jLabel3.setText("Commits");

        txCommits.setEditable(false);

        jLabel5.setText("Merges");

        txMerges.setEditable(false);

        jLabel7.setText("Branches");

        txBranches.setEditable(false);

        jLabel6.setText("Committers");

        txCommitters.setEditable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/loading1.gif"))); // NOI18N
        jLabel1.setText("Loading ...");
        jLabel1.setVisible(false);

        btBasic.setText("Get values");
        btBasic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btBasicActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btBasic))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txCommits, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(23, 23, 23))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(14, 14, 14))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txMerges, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                    .addComponent(txCommitters)
                                    .addComponent(txBranches, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))))
                        .addGap(0, 271, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txCommits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txCommitters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txBranches, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txMerges, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btBasic))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Basic", jPanel2);

        jLabel4.setText("Conflicts");

        txConflitcts.setEditable(false);

        labelLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/loading1.gif"))); // NOI18N
        labelLoading.setText("Loading ...");
        labelLoading.setVisible(false);

        btConflict.setText("Get values");
        btConflict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConflictActionPerformed(evt);
            }
        });

        txMergesC.setEditable(false);

        jLabel2.setText("Total of Merges");

        jLabel8.setText("Merges with conflicts");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(labelLoading)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, Short.MAX_VALUE)
                        .addComponent(btConflict))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txConflitcts, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txMergesC, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbConflicts, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txMergesC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbConflicts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txConflitcts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btConflict)
                    .addComponent(labelLoading))
                .addContainerGap())
        );

        jTabbedPane4.addTab("Conflicts", jPanel3);

        jLabel10.setText("Majority Classes");

        labelLoadingMJ.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/loading1.gif"))); // NOI18N
        labelLoadingMJ.setText("Loading ...");
        labelLoadingMJ.setVisible(false);

        btMajority.setText("Get values");
        btMajority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMajorityActionPerformed(evt);
            }
        });

        jcbMajority1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMajority1ActionPerformed(evt);
            }
        });

        txMajority1.setEditable(false);

        jLabel9.setText("Total of Merges");

        jLabel11.setText("Committers who performed merges");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jcbMajority1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txMajority1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(52, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(labelLoadingMJ)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 246, Short.MAX_VALUE)
                        .addComponent(btMajority)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txMajority1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbMajority1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btMajority)
                    .addComponent(labelLoadingMJ))
                .addContainerGap())
        );

        jTabbedPane4.addTab("Majority", jPanel4);

        txRepositoryName.setEnabled(false);

        labelRepository.setText("Repository Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelRepository)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txRepositoryName)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelRepository)
                    .addComponent(txRepositoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btBasicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btBasicActionPerformed

        txBranches.setText(String.valueOf(repos.getBranches().size()));
        txCommits.setText(String.valueOf(repos.getCommits()));
        txCommitters.setText(String.valueOf(repos.getCommitters().size()));
        txMerges.setText(String.valueOf(repos.getListOfMerges().size()));


    }//GEN-LAST:event_btBasicActionPerformed

    private void btConflictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConflictActionPerformed
        Runnable r = () -> {
            labelLoading.setVisible(true);

            MergeFilesDao mergeFilesDao = new MergeFilesDao();

            int countConflicts = 0;
            List<String> conflictingMerges = new ArrayList<>();
            
            Map<String, TableModel> sheet = new LinkedHashMap<>();
            DefaultTableModel model = new DefaultTableModel(new Object[]{"Hash do merge", "Data do merge", "Data do ancestral", "Tempo de isolamento", "Conflito", "Qtde. arquivos em conflito", "Qtde. linhas em conflito"}, 0);
            
            for (String hashMerge : this.repos.getListOfMerges()) {
                hashMerge = hashMerge.split(" ")[0];

                System.out.println("hashMerge\t" + hashMerge + "\t" + this.repos.getProject());

                MergeFiles merge = mergeFilesDao.getMerge(hashMerge, this.repos.getProject());

                int lines = 0, files = 0;//Counting conflicted lines and files.
                boolean hasConflict = false;//Checking conflict
                
                if (RevisionAnalyzer.hasConflict(this.repos.getProject().toString(), merge.getParents()[0], merge.getParents()[1])) {
                    hasConflict = true;
                	System.out.println("\t4. Conflicting files:\tYES\tYES\tYES\tYES\t");
                    countConflicts++;
                    conflictingMerges.add(hashMerge);
                    
                    //=================================================//
                    
                    List<String> conflictedFiles = RunGit.getListOfResult("git diff --name-only --diff-filter=U", repos.getProject());
                    List<String> conflictedLines = RunGit.getListOfResult("git diff", repos.getProject());
                    
                    /*System.out.println("\n\nArquivos conflitados:\n");
                    for(String file : conflictedFiles)
                    	System.out.println("=> " + file);*/
                    
                    System.out.println("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
                    boolean inicio = false;
                    for(String line : conflictedLines)
                    {
                    	System.out.println(line);
                    	if(line.contains("======="))
                    		inicio = true;
                    	else if(line.contains(">>>>>>> "))
                    		inicio = false;
                    	else if(inicio)
                    		lines++;
                    }
                    
                    //System.out.println("Arquivos com conflito: " + conflictedFiles.size());
                    //System.out.println("Linhas com conflito: " + lines + "\n");
                    
                    files = conflictedFiles.size();
                    
                    /*Alguns comandos Git:
                    git log --reverse --ancestry-path HASH^..origin/BRANCH --pretty=format:%ci
                    git log --reverse --ancestry-path f12b46a0ceaf2925a75fc3efd45ff2d0e60640d6^..refs/remotes/origin/Ramo2 --pretty=format:%ci
                    git show-ref --head
                    git rev-list ANCESTOR_HASH ^..PARENT_HASH
                    git log --pretty=format:%HX%ci ANCESTOR_HASH PARENT_HASH*/
                    //=================================================//
                }
                
                //System.out.printf("Parents: %s | %s \n", merge.getParents()[0], merge.getParents()[1]);
                
                
                //==========//   Ancestor's data   //==========//
                String hashAncestor = merge.getHashBase(), mergeTimestamp = RunGit.getResult("git log -1 --pretty=format:%ci " + merge.getParents()[1], repos.getProject()).substring(0, 19);;
                List<String> beginLineTotal = RunGit.getListOfResult("git log --pretty=format:%HX%ciX%ct " + hashAncestor + " .." + merge.getParents()[1], repos.getProject());
                String parts[] = beginLineTotal.get(beginLineTotal.size()-1).split("X"), hashNextAncestor = parts[0], timestampNextAncestor = parts[1].substring(0, 19), timestampParent;
                //System.out.println("Hash: " + hashNextAncestor + " | Timestamp: " + timestampNextAncestor);
                
                
                //==========//   Parent's data   //==========//
                String parentData = RunGit.getResult("git log -1 --pretty=format:%ciX%ct " + merge.getParents()[1], repos.getProject()),  parts2[] = parentData.split("X");
                timestampParent = parts2[0].substring(0, 19);

                //System.out.println("Timestamp Parent: " + timestampParent);
                
              	//==========//        Dates   //==========//
                long ancestorUnixTs = Long.parseLong(parts[2]), parentUnixTs = Long.parseLong(parts2[1]);
                
                //System.out.println("Diff: " + Statistics.unixConvertedToString(ancestorUnixTs, parentUnixTs));
                //System.out.println("Unix timestamp: " + Math.abs(ancestorUnixTs-parentUnixTs));
                
                
                model.insertRow(model.getRowCount(), new Object[] {merge.getHash(), mergeTimestamp, timestampNextAncestor, Statistics.unixConvertedToString(ancestorUnixTs, parentUnixTs), hasConflict, files, lines});
                sheet.put("Analysis", model);
            }
            Export.toExcel(sheet);
			
            txMergesC.setText(String.valueOf(this.repos.getListOfMerges().size()));
            txConflitcts.setText(String.valueOf(countConflicts));
            jcbConflicts.setModel(new DefaultComboBoxModel(conflictingMerges.toArray()));

            labelLoading.setVisible(false);
        };
        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_btConflictActionPerformed

    private void btMajorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMajorityActionPerformed
        Runnable r = () -> {
            labelLoadingMJ.setVisible(true);

            Map<Committer, Integer> mjClass = new HashMap<>();
            for (String hashMerge : this.repos.getListOfMerges()) {
                hashMerge = hashMerge.split(" ")[0];
                
                Committer committer = CommitterDao.getCommitter1(hashMerge, this.repos);
                if (mjClass.get(committer) == null) {
                    mjClass.put(committer, 1);
                } else {
                    mjClass.put(committer, mjClass.get(committer) + 1);
                }

            }
            List<String> mjlist = new ArrayList<>();
            mjClass.keySet().stream().forEach((cmter) -> {
                mjlist.add(mjClass.get(cmter) + " - " + cmter.getName());
            });
            Collections.sort(mjlist);

            txMajority1.setText(String.valueOf(this.repos.getListOfMerges().size()));
            jcbMajority1.setModel(new DefaultComboBoxModel(mjlist.toArray()));

            labelLoadingMJ.setVisible(false);
        };
        Thread t = new Thread(r);
        t.start();

    }//GEN-LAST:event_btMajorityActionPerformed

    private void jcbMajority1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMajority1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbMajority1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btBasic;
    private javax.swing.JButton btConflict;
    private javax.swing.JButton btMajority;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JComboBox jcbConflicts;
    private javax.swing.JComboBox jcbMajority1;
    private javax.swing.JLabel labelLoading;
    private javax.swing.JLabel labelLoadingMJ;
    private javax.swing.JLabel labelRepository;
    private javax.swing.JTextField txBranches;
    private javax.swing.JTextField txCommits;
    private javax.swing.JTextField txCommitters;
    private javax.swing.JTextField txConflitcts;
    private javax.swing.JTextField txMajority1;
    private javax.swing.JTextField txMerges;
    private javax.swing.JTextField txMergesC;
    private javax.swing.JTextField txRepositoryName;
    // End of variables declaration//GEN-END:variables
}
