/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.gems.tipmerge.analyzer;

import br.uff.ic.gems.tipmerge.dao.CommitterDao;
import br.uff.ic.gems.tipmerge.model.Committer;
import br.uff.ic.gems.tipmerge.util.RunGit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author jjcfigueiredo
 */
public class LastCommit extends javax.swing.JFrame {

    /**
     * Creates new form LastCommit
     */
    public LastCommit() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonSelect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Last Commit Analyzer");

        jButtonSelect.setText("Select folder");
        jButtonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectActionPerformed(evt);
            }
        });

        jLabel1.setText("Last Commit Matching");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(102, Short.MAX_VALUE)
                .addComponent(jButtonSelect)
                .addGap(80, 80, 80))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSelect)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectActionPerformed
        JFileChooser fileChooser = new JFileChooser(new File("/"));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setDialogTitle("Select projects directory");
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            System.out.println("You chose to open this directory: " + fileChooser.getSelectedFile().getName());

            //cria o arquivo com o nome resultados no mesmo diretório dos projetos...
            PrintWriter out;
            try {
                //cria um arquivo chamado results.txt e grava as informações lá
                out = new PrintWriter(new BufferedWriter(new FileWriter(fileChooser.getSelectedFile().toString() + "/results.txt", true)));
                out.println("[Project Name]");
                out.close();
            } catch (IOException ex) {
                System.out.println("It is not possible create file...");
                Logger.getLogger(MergesCounter1.class.getName()).log(Level.SEVERE, null, ex);
            }

            for (File project : fileChooser.getSelectedFile().listFiles()) {
                if (project.isDirectory()) {
                    System.out.println("\nAnalyzing the project\t" + project.getName());

                    List<String> merges = RunGit.getListOfResult("git log --all --merges --pretty=%H%x09%an%x09%ae", project);
                    //git show -s --format=\"%an%x09%ae%x09%ct\" 
                    System.out.println("Total of Merges\t" + merges.size());
                    double mergesIn = 0.0;
                    double mergesAll = 0.0;

                    try {
                        //cria um arquivo chamado results.txt e grava as informações lá
                        out = new PrintWriter(new BufferedWriter(new FileWriter(fileChooser.getSelectedFile().toString() + "/results.txt", true)));
                        out.println(project.getName() + "\n");
                        out.close();
                    } catch (IOException ex) {
                        System.out.println("Não foi possível salvar os dados deste projeto...");
                        Logger.getLogger(MergesCounter1.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (String merge : merges) {
                        String mergeHash = merge.split("\t")[0];
                        System.out.println("merge:\t" + merge);
                        String hashParents = RunGit.getResult("git log --pretty=%P -n 1 " + mergeHash, project);
                        //identifica os parents de cada ramo nas posições 0 e 1
                        String[] parent = new String[]{hashParents.split(" ")[0], hashParents.split(" ")[1]};
                        //pega o timestamp dos parents
                        String[] parent0 = RunGit.getResult("git show -s --format=%an%x09%ae%x09%ct " + parent[0], project).split("\t");
                        String[] parent1 = RunGit.getResult("git show -s --format=%an%x09%ae%x09%ct " + parent[1], project).split("\t");
                        String hashBase = RunGit.getResult("git merge-base " + parent[0] + " " + parent[1], project);

                        System.out.println("Parentes:\t" + Arrays.toString(parent));
                        System.out.println("\t" + Arrays.toString(parent0) + "\t" + Arrays.toString(parent1));

                        Committer committerMerge = new Committer(merge.split("\t")[1], merge.split("\t")[2]);
                        Committer committerLast;

                        //compara os timestamp para saber qual dos dois foi o mais atual
                        if (Long.valueOf(parent0[2]) > Long.valueOf(parent1[2])) {
                            committerLast = new Committer(parent0[0], parent0[1]);
                        } else {
                            committerLast = new Committer(parent1[0], parent1[1]);
                        }

                        CommitterDao committerDao = new CommitterDao();
                        //pega a lista de pessoas que fizeram commit no ramo 1
                        List<Committer> committersb1 = committerDao.getCommittersList(hashBase, parent[0], project);
                        //pega a lista de pessoas que fizeram commit no ramo 2
                        List<Committer> committersb2 = committerDao.getCommittersList(hashBase, parent[1], project);
                        //conta quantas pessoas tem em cada ramo
                        int tam1 = committersb1.size(), tam2 = committersb2.size();

                        if (tam1 >= 2 && tam2 >= 2) {
                            System.out.println("B1\t" + committersb1.toString());
                            System.out.println("B2\t" + committersb2.toString());
                            //verifica se tem ao menos 3 pessoas DIFERENTES somando-se os dois ramos
                            //if ((tam1 + tam2 >= 2) && (countUnique(committersb1, committersb2, 2))) {
                                mergesAll++;
                                
                                String test = "";
                                if (committerLast.equals(committerMerge)) {
                                    mergesIn++;
                                    test = "\tmatch";
                                }else test = "";

                                try {
                                    out = new PrintWriter(new BufferedWriter(new FileWriter(fileChooser.getSelectedFile().toString() + "/results.txt", true)));
                                    out.println(merge.split("\t")[0] + "\t" + committerMerge.getName() + "\t" + committerLast.getName() + test);
                                    out.close();
                                } catch (IOException ex) {
                                    Logger.getLogger(MergesCounter1.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            //}
                        }
                    }
                    //envia o resultado para o arquivo
                    System.out.println("mergesIn / mergesAll\t" + mergesIn + " " + mergesAll);
                    System.out.println(project.getName() + "\t" + mergesIn / mergesAll);
                    try {
                        out = new PrintWriter(new BufferedWriter(new FileWriter(fileChooser.getSelectedFile().toString() + "/results.txt", true)));
                        out.println("mergesIn / mergesAll\t" + mergesIn + " " + mergesAll);
                        out.println(project.getName() + "\t" + mergesIn / mergesAll);
                        out.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MergesCounter1.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        } else {
            System.out.println("You cancel the operation: " + fileChooser.getSelectedFile().getName());
        }
    }//GEN-LAST:event_jButtonSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LastCommit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LastCommit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LastCommit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LastCommit.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LastCommit lastCommit = new LastCommit();
                lastCommit.setLocationRelativeTo(null);
                lastCommit.setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSelect;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private boolean countUnique(List<Committer> committersb1, List<Committer> committersb2, int min) {
        //System.out.println(committersb1.toString());
        //System.out.println(committersb2.toString());
        int count = committersb1.size();
        if (count >= min) {
            return true;
        }
        for (Committer cmt : committersb2) {
            if (!committersb1.contains(cmt)) {
                if (count++ >= min - 1) {
                    return true;
                }
            }
            //System.out.println("count\t" + count);
        }
        return false;
    }

}
